plugins {
    id("java")
    id("com.github.johnrengelman.shadow").version("7.1.2")
    id("net.kyori.blossom").version("1.3.1")
}

allprojects {
    apply(plugin: "java")
    apply(plugin: "com.github.johnrengelman.shadow")
    apply(plugin: "net.kyori.blossom")

    repositories {
        mavenCentral()
        maven {
            url("https://repo.papermc.io/repository/maven-public")
        }
        maven {
            url("https://mvn.exceptionflug.de/repository/exceptionflug-public")
        }
    }
    dependencies {
        annotationProcessor("org.projectlombok:lombok:${project.lombok_version}")
        compileOnly("org.projectlombok:lombok:${project.lombok_version}")
        compileOnly("dev.simplix:protocolize-api:${project.protocolize_version}")
    }

    group = project.maven_group
    def ENV = System.getenv()
    String realVersion = "${project.plugin_version}"

    realVersion += "." + (ENV.BUILD_NUMBER ? "${ENV.BUILD_NUMBER}" : Integer.MAX_VALUE)
    realVersion += ENV.COMMIT_SHA ? "+${ENV.COMMIT_SHA}" : ""
    switch (ENV.BUILD_TYPE) {
        case "RELEASE":
            realVersion += "-stable"
            break
        case "BETA":
            realVersion += "-beta"
            break
        default:
            realVersion += "-dev"
    }

    version = realVersion
    description = project.plugin_description

    jar {
        from("LICENSE")
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
}

jar {
    // Disable cache
    outputs.upToDateWhen { false }
    dependsOn(project.subprojects.collect {
        it.tasks.jar
    })

    doFirst {
        // Clean up legacy files.
        delete fileTree("build/tmp/merged")
        copy {
            from {
                project.subprojects.collect {
                    "${it.buildDir}/classes/java/main"
                }
            }
            from {
                project.subprojects.collect {
                    "${it.buildDir}/resources/main"
                }
            }
            into("build/tmp/merged")
        }
    }

    from("LICENSE")
    from("build/tmp/merged")
}